GIT_BRANCH = getGitBranchName()

switch("${GIT_BRANCH}") {
  case ["main", "release-next"]:
    PUBLISH_PACKAGES_DEFAULT = true
    PACKAGE_SUFFIX_DEFAULT = 'Nightly'
    PLATFORM_CHOICES = ['all']
    ANACONDA_CHANNEL_DEFAULT = 'mantid'
    ANACONDA_CHANNEL_LABEL_DEFAULT = 'nightly'
    PACKAGE_OPTIONS = ''
    break
  default:
    PUBLISH_PACKAGES_DEFAULT = false
    PACKAGE_SUFFIX_DEFAULT = 'Unstable'
    PLATFORM_CHOICES = ['none', 'all', 'linux-64', 'win-64', 'osx-64']
    ANACONDA_CHANNEL_DEFAULT = 'mantid-testing'
    ANACONDA_CHANNEL_LABEL_DEFAULT = 'unstable'
    break
}


pipeline {
    agent none
    parameters {
        string(name: 'ANACONDA_CHANNEL_LABEL', defaultValue: ANACONDA_CHANNEL_LABEL_DEFAULT, description: '')
        booleanParam(name: 'PUBLISH_PACKAGES', defaultValue: PUBLISH_PACKAGES_DEFAULT, description: '')
    }
    stages {
        stage('Sandbox') {
            agent { label 'linux-64' }
            steps {
                sh "echo ${GIT_BRANCH}"
                sh "echo ${env.ANACONDA_CHANNEL_LABEL}"
            }
        }
    }
}

def getGitBranchName() {
  name = scm.branches[0].name
  if (name.contains("*/")) {
    name = name.split("\\*/")[1]
  }
  return name
}

