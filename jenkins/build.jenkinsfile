// This script expects the following environment variables to be set by the Jenkins job:
// GITHUB_USER_NAME - The name of the user, being used with pushing/pulling from conda-recipes whilst updating it.
// GITHUB_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for cloning and pushing to the conda-recipes repo
// ANACONDA_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for publishing conda packages
// ANACONDA_CHANNEL - The channel to publish to on Anaconda.org
// ANACONDA_CHANNEL_LABEL - This will be used as the label for the channel, otherwise no label will be set.

def build_and_test_unix() {
  sh "bash -ex ${WORKSPACE}/jenkins/test-buildscript ${WORKSPACE} linux"
}

def build_and_test_win(){
    bat "\"${WIN_BASH}\" -ex -c \"${WORKSPACE}/jenkins/test-buildscript ${WORKSPACE} win\""
}

pipeline {
  agent none
  environment {
    WIN_BASH = "C:\\Program Files\\git\\bin\\bash.exe"
  }

  stages {
    stage('Build and Test') {
      parallel {
        stage('windows') {
          agent { label 'conda-build-win' }
          steps {
            script { WORKSPACE = "$WORKSPACE".replaceAll("\\\\", "/") }
            build_and_test_win()
          }
          post {
            always {
              xunit thresholds: [failed(failureThreshold: '0')], 
                  tools: [CTest(excludesPattern: '', pattern: 'build/Testing/**/*.xml', stopProcessingIfError: true)]
            }
          }
        }
        stage('linux') {
          agent { label 'conda-build-linux' }
          steps {
            script { WORKSPACE = "$WORKSPACE".replaceAll("\\\\", "/") }
            build_and_test_unix()
          }
          post {
            always {
              xunit thresholds: [failed(failureThreshold: '0')], 
                  tools: [CTest(excludesPattern: '', pattern: 'build/Testing/**/*.xml', stopProcessingIfError: true)]
            }
          }
        }
      }
    }
  }
}
